// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250506123713_MakePasswordFieldsNullable")]
    partial class MakePasswordFieldsNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.CompanyModel", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CompanyID"));

                    b.Property<string>("CVR")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ResetPasswordTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CompanyID");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("Backend.Models.EmployeeModel", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("JobTitle")
                        .HasColumnType("longtext");

                    b.HasKey("EmployeeID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Backend.Models.SalaryModel", b =>
                {
                    b.Property<int>("SalaryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SalaryID"));

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeModelEmployeeID")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("double");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SalaryID");

                    b.HasIndex("EmployeeModelEmployeeID");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ResetPasswordTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("UserId");

                    b.HasIndex("CompanyID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin",
                            PasswordHash = new byte[] { 137, 74, 61, 132, 4, 158, 111, 65, 172, 62, 198, 159, 48, 178, 121, 222, 185, 103, 9, 127, 102, 3, 62, 54, 21, 12, 43, 187, 133, 8, 188, 35, 251, 129, 136, 135, 50, 79, 17, 115, 187, 62, 224, 243, 237, 69, 184, 11, 125, 171, 252, 255, 57, 180, 138, 44, 208, 48, 217, 26, 33, 122, 33, 46 },
                            PasswordSalt = new byte[] { 147, 5, 163, 31, 205, 71, 173, 186, 200, 86, 50, 154, 219, 45, 160, 188, 8, 146, 24, 243, 41, 48, 190, 41, 169, 80, 18, 27, 156, 228, 145, 225, 122, 188, 128, 166, 191, 32, 142, 196, 176, 142, 139, 95, 232, 189, 10, 202, 173, 215, 250, 243, 68, 62, 212, 66, 75, 180, 199, 224, 18, 86, 241, 112, 244, 24, 173, 65, 222, 186, 194, 226, 166, 204, 139, 48, 165, 86, 179, 112, 64, 102, 14, 135, 227, 185, 249, 193, 99, 79, 182, 62, 124, 214, 11, 116, 118, 44, 190, 223, 249, 73, 36, 209, 27, 186, 117, 146, 224, 183, 54, 85, 151, 201, 58, 112, 65, 27, 55, 243, 27, 234, 36, 30, 246, 152, 210, 132 },
                            Role = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "user",
                            PasswordHash = new byte[] { 199, 5, 58, 1, 107, 224, 17, 72, 228, 77, 77, 175, 90, 84, 21, 128, 160, 200, 1, 10, 2, 113, 143, 4, 189, 145, 196, 103, 216, 102, 164, 203, 92, 56, 235, 198, 187, 97, 209, 180, 49, 32, 125, 139, 110, 160, 134, 24, 244, 184, 41, 210, 16, 49, 74, 216, 254, 58, 124, 38, 77, 194, 42, 66 },
                            PasswordSalt = new byte[] { 192, 105, 204, 89, 28, 143, 203, 96, 85, 143, 109, 111, 96, 35, 111, 44, 46, 253, 3, 122, 69, 141, 160, 0, 97, 194, 97, 19, 26, 62, 185, 6, 13, 9, 184, 71, 193, 192, 196, 47, 125, 201, 73, 79, 52, 169, 11, 58, 9, 66, 126, 99, 176, 131, 54, 214, 151, 15, 85, 48, 90, 242, 106, 73, 98, 223, 7, 231, 93, 184, 42, 33, 12, 212, 34, 57, 225, 18, 124, 52, 172, 108, 131, 142, 178, 140, 222, 199, 207, 44, 173, 125, 86, 198, 221, 211, 114, 172, 222, 108, 212, 117, 186, 204, 251, 71, 210, 51, 112, 223, 28, 73, 222, 133, 213, 86, 65, 222, 188, 73, 91, 121, 72, 28, 121, 187, 127, 160 },
                            Role = "User"
                        });
                });

            modelBuilder.Entity("Backend.Models.EmployeeModel", b =>
                {
                    b.HasOne("Backend.Models.CompanyModel", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Backend.Models.SalaryModel", b =>
                {
                    b.HasOne("Backend.Models.EmployeeModel", null)
                        .WithMany("Salaries")
                        .HasForeignKey("EmployeeModelEmployeeID");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.HasOne("Backend.Models.CompanyModel", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Backend.Models.EmployeeModel", b =>
                {
                    b.Navigation("Salaries");
                });
#pragma warning restore 612, 618
        }
    }
}
