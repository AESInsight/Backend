// <auto-generated />
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250411084905_RemoveEmailPasswordField")]
    partial class RemoveEmailPasswordField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.CompanyModel", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CompanyID"));

                    b.Property<string>("CVR")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CompanyID");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("Backend.Models.EmployeeModel", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("JobTitle")
                        .HasColumnType("longtext");

                    b.Property<double>("Salary")
                        .HasColumnType("double");

                    b.HasKey("EmployeeID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            PasswordHash = new byte[] { 164, 12, 98, 104, 208, 80, 141, 31, 62, 133, 170, 157, 198, 6, 33, 138, 135, 129, 232, 126, 55, 243, 16, 198, 213, 58, 230, 185, 146, 167, 53, 217, 137, 18, 201, 111, 219, 227, 170, 245, 229, 6, 65, 133, 53, 94, 107, 130, 202, 125, 116, 165, 248, 253, 32, 238, 155, 207, 244, 87, 103, 44, 27, 205 },
                            PasswordSalt = new byte[] { 184, 176, 182, 182, 35, 203, 148, 61, 200, 173, 206, 176, 162, 215, 193, 99, 56, 217, 202, 102, 3, 248, 124, 195, 229, 11, 237, 77, 96, 107, 65, 91, 201, 215, 227, 229, 170, 17, 205, 178, 111, 248, 124, 17, 9, 126, 104, 205, 200, 105, 168, 80, 156, 28, 238, 35, 29, 139, 0, 237, 48, 241, 214, 148, 122, 170, 99, 245, 91, 176, 175, 199, 170, 62, 17, 169, 237, 83, 11, 85, 27, 212, 136, 32, 197, 170, 44, 25, 252, 195, 76, 33, 225, 215, 35, 103, 187, 6, 141, 171, 190, 227, 49, 248, 139, 43, 227, 245, 44, 24, 26, 188, 9, 135, 193, 65, 145, 4, 58, 253, 132, 220, 45, 31, 235, 158, 43, 120 },
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            PasswordHash = new byte[] { 240, 29, 184, 243, 121, 65, 109, 162, 216, 103, 179, 90, 126, 169, 54, 108, 22, 37, 111, 147, 59, 210, 29, 141, 12, 226, 233, 192, 193, 154, 108, 240, 116, 115, 46, 32, 85, 195, 203, 22, 16, 132, 97, 41, 19, 176, 142, 79, 202, 248, 1, 80, 162, 93, 169, 137, 168, 239, 233, 228, 134, 162, 44, 168 },
                            PasswordSalt = new byte[] { 29, 13, 128, 104, 189, 125, 135, 223, 119, 163, 237, 148, 67, 184, 79, 177, 161, 149, 226, 130, 75, 54, 164, 224, 181, 162, 211, 191, 177, 101, 73, 226, 18, 172, 70, 199, 56, 212, 14, 20, 127, 159, 112, 136, 81, 203, 160, 153, 113, 87, 185, 63, 92, 237, 69, 252, 229, 137, 253, 66, 6, 139, 144, 81, 128, 86, 170, 21, 153, 66, 206, 152, 31, 225, 156, 187, 194, 175, 87, 73, 98, 99, 254, 24, 184, 131, 239, 25, 123, 108, 159, 209, 155, 29, 91, 5, 193, 73, 1, 132, 126, 207, 11, 96, 134, 48, 14, 181, 42, 83, 202, 225, 41, 248, 194, 56, 234, 112, 37, 103, 179, 150, 177, 132, 107, 120, 234, 80 },
                            Role = "User",
                            Username = "user"
                        });
                });

            modelBuilder.Entity("Backend.Models.EmployeeModel", b =>
                {
                    b.HasOne("Backend.Models.CompanyModel", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });
#pragma warning restore 612, 618
        }
    }
}
