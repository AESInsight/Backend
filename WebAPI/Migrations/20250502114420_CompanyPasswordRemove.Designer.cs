// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250502114420_CompanyPasswordRemove")]
    partial class CompanyPasswordRemove
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.CompanyModel", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CompanyID"));

                    b.Property<string>("CVR")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CompanyID");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("Backend.Models.EmployeeModel", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("JobTitle")
                        .HasColumnType("longtext");

                    b.HasKey("EmployeeID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Backend.Models.SalaryModel", b =>
                {
                    b.Property<int>("SalaryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SalaryID"));

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeModelEmployeeID")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("double");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SalaryID");

                    b.HasIndex("EmployeeModelEmployeeID");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("CompanyID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            PasswordHash = new byte[] { 76, 177, 182, 188, 24, 127, 115, 188, 210, 201, 63, 62, 196, 108, 113, 227, 242, 210, 203, 176, 163, 76, 107, 126, 216, 233, 170, 148, 218, 251, 102, 168, 93, 51, 176, 92, 74, 79, 225, 219, 153, 121, 86, 242, 125, 214, 147, 245, 168, 70, 38, 121, 167, 147, 146, 245, 244, 142, 50, 235, 64, 106, 1, 232 },
                            PasswordSalt = new byte[] { 255, 212, 21, 224, 152, 62, 47, 102, 199, 72, 105, 255, 30, 239, 254, 187, 154, 232, 136, 212, 91, 54, 252, 92, 34, 177, 149, 8, 214, 25, 36, 184, 147, 249, 53, 104, 3, 152, 255, 81, 140, 219, 143, 254, 169, 68, 152, 77, 250, 105, 120, 234, 198, 235, 246, 90, 180, 102, 207, 222, 134, 103, 135, 101, 243, 62, 186, 202, 219, 168, 137, 171, 183, 237, 18, 9, 38, 192, 184, 106, 50, 197, 201, 232, 234, 127, 211, 234, 25, 20, 146, 150, 7, 46, 108, 110, 182, 202, 65, 161, 7, 69, 177, 143, 88, 129, 12, 232, 9, 254, 63, 242, 173, 78, 22, 40, 26, 101, 25, 22, 211, 10, 171, 178, 183, 32, 77, 153 },
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            PasswordHash = new byte[] { 136, 17, 47, 144, 162, 229, 203, 26, 20, 43, 53, 68, 226, 154, 66, 177, 67, 136, 169, 153, 144, 254, 80, 247, 242, 194, 208, 173, 166, 211, 155, 232, 133, 162, 15, 209, 162, 246, 95, 157, 58, 165, 122, 217, 69, 202, 251, 43, 69, 87, 133, 184, 59, 18, 164, 145, 59, 63, 85, 248, 173, 171, 131, 122 },
                            PasswordSalt = new byte[] { 238, 108, 154, 201, 142, 184, 206, 136, 234, 93, 130, 126, 192, 154, 47, 225, 68, 144, 194, 180, 170, 192, 95, 120, 224, 39, 202, 186, 104, 103, 68, 190, 113, 13, 185, 97, 254, 64, 228, 237, 204, 7, 151, 222, 182, 200, 87, 99, 171, 232, 28, 59, 167, 20, 69, 244, 245, 196, 82, 35, 2, 101, 88, 33, 51, 100, 10, 16, 93, 51, 24, 50, 31, 160, 165, 170, 159, 164, 165, 20, 4, 119, 212, 164, 163, 104, 205, 154, 124, 244, 42, 115, 112, 107, 179, 168, 20, 232, 87, 60, 66, 49, 95, 27, 186, 170, 156, 38, 176, 30, 160, 254, 162, 11, 137, 168, 176, 54, 75, 143, 52, 108, 114, 231, 134, 200, 0, 210 },
                            Role = "User",
                            Username = "user"
                        });
                });

            modelBuilder.Entity("Backend.Models.EmployeeModel", b =>
                {
                    b.HasOne("Backend.Models.CompanyModel", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Backend.Models.SalaryModel", b =>
                {
                    b.HasOne("Backend.Models.EmployeeModel", null)
                        .WithMany("Salaries")
                        .HasForeignKey("EmployeeModelEmployeeID");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.HasOne("Backend.Models.CompanyModel", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Backend.Models.EmployeeModel", b =>
                {
                    b.Navigation("Salaries");
                });
#pragma warning restore 612, 618
        }
    }
}
