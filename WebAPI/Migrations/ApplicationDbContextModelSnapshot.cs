// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.CompanyModel", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CompanyID"));

                    b.Property<string>("CVR")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CompanyID");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("Backend.Models.EmployeeModel", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("JobTitle")
                        .HasColumnType("longtext");

                    b.HasKey("EmployeeID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Backend.Models.SalaryModel", b =>
                {
                    b.Property<int>("SalaryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SalaryID"));

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("double");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SalaryID");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            PasswordHash = new byte[] { 39, 99, 148, 185, 57, 129, 240, 206, 39, 18, 122, 154, 148, 1, 22, 7, 106, 253, 254, 85, 140, 61, 116, 27, 30, 128, 49, 112, 116, 244, 215, 159, 33, 212, 196, 24, 87, 43, 77, 65, 40, 160, 187, 12, 27, 62, 108, 155, 203, 236, 137, 93, 120, 149, 110, 16, 194, 7, 169, 188, 26, 42, 199, 245 },
                            PasswordSalt = new byte[] { 91, 91, 79, 229, 160, 70, 179, 57, 223, 227, 196, 245, 173, 246, 160, 99, 176, 78, 213, 11, 26, 181, 251, 198, 71, 171, 124, 155, 38, 10, 62, 8, 14, 97, 19, 74, 34, 67, 157, 89, 91, 83, 135, 74, 65, 33, 75, 31, 53, 23, 223, 180, 83, 193, 25, 125, 22, 173, 238, 39, 10, 144, 123, 202, 67, 248, 47, 164, 14, 227, 147, 136, 105, 69, 152, 217, 168, 94, 47, 252, 191, 61, 94, 141, 38, 16, 57, 9, 148, 108, 105, 175, 134, 150, 252, 192, 173, 89, 100, 93, 77, 170, 108, 28, 182, 215, 58, 0, 3, 145, 28, 1, 158, 164, 221, 200, 66, 70, 125, 175, 240, 88, 185, 43, 211, 169, 65, 159 },
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            PasswordHash = new byte[] { 30, 179, 124, 61, 233, 105, 23, 115, 13, 189, 21, 74, 212, 149, 85, 158, 21, 29, 218, 77, 27, 229, 52, 137, 250, 174, 221, 119, 245, 46, 83, 90, 1, 225, 112, 170, 8, 99, 92, 210, 244, 42, 120, 178, 21, 1, 103, 66, 184, 17, 143, 36, 167, 104, 163, 154, 87, 146, 226, 237, 88, 175, 128, 245 },
                            PasswordSalt = new byte[] { 81, 56, 168, 247, 4, 252, 91, 185, 31, 189, 94, 198, 166, 234, 162, 210, 84, 67, 105, 145, 189, 146, 166, 161, 156, 206, 80, 67, 56, 164, 109, 9, 31, 188, 200, 106, 16, 252, 224, 226, 161, 174, 96, 50, 254, 134, 250, 22, 235, 37, 45, 78, 134, 98, 97, 183, 250, 235, 254, 16, 51, 134, 20, 92, 9, 230, 205, 180, 253, 99, 137, 119, 126, 68, 89, 248, 220, 36, 40, 93, 207, 213, 24, 234, 186, 187, 255, 115, 70, 149, 129, 195, 23, 132, 6, 120, 11, 204, 112, 171, 100, 206, 90, 44, 110, 10, 90, 253, 73, 196, 201, 141, 36, 252, 153, 47, 35, 191, 163, 55, 33, 32, 57, 192, 157, 62, 105, 97 },
                            Role = "User",
                            Username = "user"
                        });
                });

            modelBuilder.Entity("Backend.Models.EmployeeModel", b =>
                {
                    b.HasOne("Backend.Models.CompanyModel", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });
#pragma warning restore 612, 618
        }
    }
}
