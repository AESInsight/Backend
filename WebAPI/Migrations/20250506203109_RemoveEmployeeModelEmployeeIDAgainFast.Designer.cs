// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250506203109_RemoveEmployeeModelEmployeeIDAgainFast")]
    partial class RemoveEmployeeModelEmployeeIDAgainFast
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.CompanyModel", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CompanyID"));

                    b.Property<string>("CVR")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ResetPasswordTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CompanyID");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("Backend.Models.EmployeeModel", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("JobTitle")
                        .HasColumnType("longtext");

                    b.HasKey("EmployeeID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Backend.Models.SalaryModel", b =>
                {
                    b.Property<int>("SalaryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SalaryID"));

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("double");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SalaryID");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ResetPasswordTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("UserId");

                    b.HasIndex("CompanyID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin",
                            PasswordHash = new byte[] { 210, 198, 63, 106, 91, 239, 213, 125, 251, 174, 101, 165, 19, 7, 45, 193, 193, 125, 189, 12, 93, 65, 161, 139, 8, 228, 202, 243, 58, 247, 88, 46, 209, 204, 19, 226, 177, 237, 132, 255, 242, 155, 199, 70, 73, 221, 196, 143, 143, 125, 12, 178, 96, 101, 84, 109, 241, 65, 39, 95, 111, 51, 182, 190 },
                            PasswordSalt = new byte[] { 94, 24, 1, 5, 250, 20, 204, 115, 173, 238, 143, 248, 71, 11, 110, 255, 127, 80, 131, 69, 181, 145, 168, 86, 87, 73, 204, 142, 85, 228, 84, 55, 100, 10, 128, 110, 255, 130, 23, 123, 58, 149, 12, 219, 113, 18, 16, 183, 58, 194, 68, 232, 68, 189, 115, 71, 242, 167, 36, 203, 135, 156, 93, 35, 177, 31, 221, 26, 99, 123, 152, 226, 233, 143, 87, 79, 196, 252, 123, 132, 14, 164, 51, 184, 4, 120, 247, 191, 74, 80, 179, 150, 225, 164, 159, 43, 15, 28, 53, 42, 238, 25, 53, 21, 208, 151, 200, 14, 24, 110, 191, 140, 199, 21, 31, 2, 222, 234, 253, 46, 216, 43, 211, 97, 176, 152, 93, 163 },
                            Role = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "user",
                            PasswordHash = new byte[] { 192, 217, 165, 65, 189, 214, 26, 220, 89, 7, 21, 234, 237, 224, 187, 108, 177, 104, 121, 38, 169, 185, 85, 227, 144, 62, 31, 42, 71, 160, 21, 106, 134, 237, 219, 153, 0, 50, 35, 138, 93, 79, 86, 11, 176, 209, 208, 182, 54, 227, 188, 198, 46, 229, 91, 121, 226, 5, 93, 243, 38, 71, 35, 223 },
                            PasswordSalt = new byte[] { 236, 34, 30, 147, 150, 69, 109, 5, 190, 152, 204, 73, 95, 84, 199, 197, 255, 140, 171, 50, 78, 178, 70, 172, 212, 49, 41, 100, 142, 222, 142, 78, 119, 217, 154, 80, 142, 156, 163, 238, 47, 50, 58, 67, 112, 137, 27, 212, 170, 156, 133, 71, 154, 224, 178, 141, 50, 36, 19, 176, 184, 197, 229, 19, 231, 120, 205, 162, 0, 45, 250, 134, 233, 146, 161, 82, 214, 25, 208, 255, 109, 73, 78, 3, 239, 26, 209, 143, 84, 215, 60, 58, 188, 105, 83, 7, 194, 205, 50, 202, 80, 251, 98, 134, 115, 44, 195, 235, 203, 243, 180, 91, 21, 126, 120, 90, 226, 65, 13, 104, 123, 160, 53, 44, 238, 246, 249, 83 },
                            Role = "User"
                        });
                });

            modelBuilder.Entity("Backend.Models.EmployeeModel", b =>
                {
                    b.HasOne("Backend.Models.CompanyModel", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Backend.Models.SalaryModel", b =>
                {
                    b.HasOne("Backend.Models.EmployeeModel", null)
                        .WithMany("Salaries")
                        .HasForeignKey("EmployeeID");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.HasOne("Backend.Models.CompanyModel", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Backend.Models.EmployeeModel", b =>
                {
                    b.Navigation("Salaries");
                });
#pragma warning restore 612, 618
        }
    }
}
