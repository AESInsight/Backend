// <auto-generated />
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250404112443_RecreateMigration")]
    partial class RecreateMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.CompanyModel", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CompanyID"));

                    b.Property<string>("CVR")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CompanyID");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("Backend.Models.EmployeeModel", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("JobTitle")
                        .HasColumnType("longtext");

                    b.Property<double>("Salary")
                        .HasColumnType("double");

                    b.HasKey("EmployeeID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            PasswordHash = new byte[] { 89, 142, 137, 64, 69, 220, 79, 95, 65, 119, 230, 147, 223, 237, 33, 152, 238, 212, 1, 67, 236, 210, 115, 187, 19, 157, 42, 206, 147, 100, 79, 176, 207, 3, 76, 11, 197, 81, 53, 170, 190, 208, 236, 25, 194, 43, 158, 22, 8, 170, 201, 36, 161, 129, 86, 139, 145, 162, 203, 163, 11, 15, 15, 176 },
                            PasswordSalt = new byte[] { 203, 191, 238, 60, 127, 183, 3, 230, 216, 57, 104, 186, 92, 42, 108, 19, 61, 100, 135, 181, 219, 54, 191, 231, 223, 50, 134, 142, 182, 169, 149, 17, 106, 147, 241, 156, 208, 178, 44, 207, 28, 151, 174, 62, 70, 175, 39, 106, 140, 209, 121, 115, 239, 106, 19, 58, 93, 147, 23, 102, 176, 126, 219, 25, 106, 131, 225, 73, 86, 55, 23, 166, 22, 157, 68, 106, 136, 28, 183, 51, 19, 54, 38, 159, 206, 55, 59, 242, 136, 74, 34, 111, 116, 250, 178, 231, 44, 168, 36, 45, 235, 99, 228, 247, 90, 74, 85, 134, 6, 182, 79, 217, 188, 179, 177, 232, 233, 138, 31, 76, 135, 208, 53, 43, 71, 201, 254, 64 },
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            PasswordHash = new byte[] { 11, 124, 221, 185, 101, 181, 127, 85, 162, 20, 205, 238, 211, 159, 48, 240, 69, 88, 245, 195, 76, 3, 75, 88, 164, 165, 231, 186, 226, 205, 250, 88, 166, 166, 145, 71, 152, 186, 154, 137, 114, 6, 232, 101, 2, 127, 28, 86, 112, 41, 35, 195, 222, 152, 67, 93, 130, 48, 172, 152, 219, 69, 186, 41 },
                            PasswordSalt = new byte[] { 203, 191, 238, 60, 127, 183, 3, 230, 216, 57, 104, 186, 92, 42, 108, 19, 61, 100, 135, 181, 219, 54, 191, 231, 223, 50, 134, 142, 182, 169, 149, 17, 106, 147, 241, 156, 208, 178, 44, 207, 28, 151, 174, 62, 70, 175, 39, 106, 140, 209, 121, 115, 239, 106, 19, 58, 93, 147, 23, 102, 176, 126, 219, 25, 106, 131, 225, 73, 86, 55, 23, 166, 22, 157, 68, 106, 136, 28, 183, 51, 19, 54, 38, 159, 206, 55, 59, 242, 136, 74, 34, 111, 116, 250, 178, 231, 44, 168, 36, 45, 235, 99, 228, 247, 90, 74, 85, 134, 6, 182, 79, 217, 188, 179, 177, 232, 233, 138, 31, 76, 135, 208, 53, 43, 71, 201, 254, 64 },
                            Role = "User",
                            Username = "user"
                        });
                });

            modelBuilder.Entity("Backend.Models.EmployeeModel", b =>
                {
                    b.HasOne("Backend.Models.CompanyModel", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });
#pragma warning restore 612, 618
        }
    }
}
