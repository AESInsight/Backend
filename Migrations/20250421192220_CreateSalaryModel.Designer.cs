// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250421192220_CreateSalaryModel")]
    partial class CreateSalaryModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.CompanyModel", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CompanyID"));

                    b.Property<string>("CVR")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CompanyID");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("Backend.Models.EmployeeModel", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("JobTitle")
                        .HasColumnType("longtext");

                    b.HasKey("EmployeeID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Backend.Models.SalaryModel", b =>
                {
                    b.Property<int>("SalaryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SalaryID"));

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("double");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SalaryID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            PasswordHash = new byte[] { 83, 202, 3, 155, 49, 125, 187, 177, 218, 10, 105, 82, 160, 68, 236, 103, 157, 212, 14, 178, 130, 119, 164, 55, 142, 207, 125, 86, 145, 73, 221, 15, 219, 249, 12, 54, 124, 214, 131, 140, 35, 221, 162, 249, 62, 93, 128, 242, 91, 87, 11, 149, 118, 148, 190, 101, 238, 135, 99, 98, 75, 233, 34, 18 },
                            PasswordSalt = new byte[] { 0, 191, 171, 40, 56, 115, 125, 3, 156, 132, 195, 198, 154, 134, 111, 213, 128, 212, 49, 226, 100, 212, 173, 194, 171, 117, 135, 109, 124, 68, 159, 255, 49, 52, 241, 85, 146, 28, 221, 118, 154, 145, 125, 189, 151, 72, 43, 88, 170, 131, 187, 81, 205, 180, 30, 20, 32, 121, 158, 84, 42, 89, 129, 188, 59, 213, 176, 206, 227, 18, 103, 191, 146, 165, 141, 250, 253, 193, 87, 157, 107, 195, 244, 130, 204, 6, 3, 178, 18, 41, 28, 62, 190, 214, 220, 23, 25, 53, 157, 127, 83, 174, 125, 51, 106, 28, 67, 10, 61, 88, 251, 8, 250, 143, 77, 18, 153, 214, 111, 225, 229, 237, 105, 118, 26, 173, 30, 213 },
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            PasswordHash = new byte[] { 11, 54, 233, 25, 88, 143, 40, 125, 104, 31, 189, 6, 216, 217, 127, 20, 31, 222, 255, 25, 52, 142, 72, 165, 100, 89, 235, 96, 255, 148, 176, 58, 139, 251, 250, 226, 144, 69, 182, 136, 201, 210, 190, 39, 213, 97, 120, 170, 110, 9, 207, 208, 142, 234, 230, 252, 163, 107, 183, 4, 108, 117, 10, 152 },
                            PasswordSalt = new byte[] { 158, 236, 164, 79, 129, 121, 17, 188, 212, 40, 225, 158, 115, 38, 6, 231, 188, 249, 161, 114, 226, 168, 33, 16, 162, 92, 204, 138, 167, 255, 26, 98, 94, 2, 20, 243, 219, 34, 46, 214, 170, 46, 121, 110, 31, 228, 147, 50, 161, 23, 231, 41, 131, 137, 133, 90, 178, 60, 167, 248, 23, 184, 231, 242, 250, 131, 97, 238, 206, 87, 78, 6, 38, 203, 159, 78, 12, 200, 224, 216, 172, 74, 73, 83, 57, 152, 112, 87, 160, 153, 27, 183, 159, 208, 206, 13, 201, 23, 12, 121, 206, 21, 115, 200, 75, 233, 209, 172, 69, 175, 215, 81, 89, 83, 23, 174, 90, 142, 189, 0, 227, 141, 93, 181, 31, 246, 91, 210 },
                            Role = "User",
                            Username = "user"
                        });
                });

            modelBuilder.Entity("Backend.Models.EmployeeModel", b =>
                {
                    b.HasOne("Backend.Models.CompanyModel", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Backend.Models.SalaryModel", b =>
                {
                    b.HasOne("Backend.Models.EmployeeModel", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });
#pragma warning restore 612, 618
        }
    }
}
